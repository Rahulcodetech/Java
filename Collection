//Collection Array 
//Static Array/Fix Size Array 
//Array 

	
	byte[] bt=new byte[5];
	short[] st=new short[5];
	int[] it=new int[5];
	long[] ln=new long[5];
	float[] ft=new float[5];
	double[] db=new double[5];
	boolean[] bl=new boolean[5];
	char[] chr=new char[5];
		
	 		int[] it=new int[5];
		it[0]=10;
		it[1]=20;
		it[3]=30;
		it[4]=40;

		System.out.println(it);
		
		for(int i=0; i<it.length; i++)
		{
			System.out.println(it[i]);
		}
		
		for(Integer e:it)
		{
			System.out.println(e);
		}
		

		System.out.println(it[2]);
		
		Scanner sc =new Scanner(System.in);
		int size=sc.nextInt();
		int num[] =new int[size];
		
		for(int j=0; j<size; j++)
		{
			num[j]=sc.nextInt();
		}
		
		System.out.println(num[0]);
		
		for(int l=0; l<num.length; l++)
		{
			System.out.print(num[l]);
		}
/-----------------------------------------------------------------------

	//Acceding and descending order 
		int[] it=new int[] {10,20,30,55,2,4,3};
		
		int temp;
		for(int i=0; i<it.length; i++)
		{
			for(int j=i; j<it.length; j++)
			{
				if(it[i]>it[j]){
				temp=it[i];
				it[i]=it[j];
				it[j]=temp;}
			}
		}
		
		for(Integer e:it)
		{
			System.out.println(e);
		}
		
/-----------------------------------------------------------------------

	String[] str=new String[2];
	str[0]="Java1";
	str[1]="SQL1";
				
	for(int z=0; z<str.length; z++)
	{
	System.out.println(str[z]);
	}
			
	for(Object n:str)
	{
	System.out.println(n);
	}
			
	for(String pn:str)
	{
	System.out.println(pn);
	}
	System.out.println(digit[1]);
		
/------------------------------------------------------------------------------------------
 	//List
	
	
	Basis				Array								ArrayList
					An array is a dynamically-created object. 			The ArrayList is a class of Java Collections framework.
	Definition			It serves as a container that holds the constant number of	It contains popular classes like Vector, HashTable, and HashMap.
					values of the same type. It has a contiguous memory location.
					
	Static/ Dynamic			Array is static in size.					ArrayList is dynamic in size.
	
	Resizable			An array is a fixed-length data structure.			ArrayList is a variable-length data structure. 
													It can be resized itself when needed.
	Initialization			It is mandatory to provide the size of an array			We can create an instance of ArrayList without specifying its size.
	
	Primitive/ Generic type		An array can store both objects and primitives type.		We cannot store primitive type in ArrayList. It automatically converts 
													primitive type to object.
	Iterating Values		We use for loop or for each loop to iterate over an array.	We use an iterator to iterate over ArrayList.
	
	Length				Array provides a length variable which denotes the 		ArrayList provides the size() method to determine the size of ArrayList.
					length of an array.	
	Single/ Multi-Dimensional	Array can be multi-dimensional.					ArrayList is always single-dimensional.
	
	
	ArrayList ar=new ArrayList();
	ar.add(10);
	ar.add(20);
	ar.add("java");
	ar.add("@#");
	
	System.out.println(ar);
				
	for(int i=0; i<ar.size(); i++)
	{
	System.out.print(ar.get(i));
	}
		
	System.out.println(" ");
		
	for(Object o:ar)
	{
	System.out.print(o);
	}
	System.out.println(" ");
		
	Iterator<Object> it=ar.iterator();
	while(it.hasNext())
	{
	System.out.print(it.next());
	}
	
	//find Maximum number in array 
	
	ArrayList<Integer> it=new ArrayList<Integer>();
	it.add(55);
	it.add(20);
	it.add(30);
	it.add(35);
	it.add(4090);
	it.add(55);
	
	int max=it.get(0);
		
	for(int j=0; j<it.size(); j++){
			
	if(it.get(j)>max)
	{
		max=it.get(j);
	}
	   System.out.println(max);
	}
		
	//find Minimum number is 
	int min=num.get(0);
	
	for(int j=0; j<num.size(); j++)
	{
		if(num.get(j)<min)
		min=num.get(j);
	}
	System.out.println("Minimum number is "+ min);
	}
/------------------------------------------------------------------------------------------------------
		
		
    	ArrayList arr=new ArrayList();  //Dynamic Object Array Array 
	arr.add(0);
	arr.add(1);
	arr.add("java");
	arr.add("SQL");
	System.out.println(arr.get(2));
		
	ArrayList<String> ar1=new ArrayList<String>();  //
	ar1.add("Java");
	ar1.add("SQL");
	System.out.println(ar1.get(1)+" String Array");
		
		
	ArrayList mylist=new ArrayList();
	mylist.add(10);
	mylist.add("java");	
	mylist.add("SQL");
		
	for(int u=0; u<mylist.size(); u++)
	{
	System.out.println(mylist.get(u));
	}
    
   	ArrayList list=new ArrayList();
	list.add(10);
	list.add(23);
	list.add(35);	
	list.add("java");
	list.add("API");

	System.out.print(list);
		
	ArrayList list1=new ArrayList();
	list1.add(20);
	list1.add(10);
	
		
	//Add 
//	list.addAll(list1);
//		
//	System.out.println(list);
//	System.out.println(list.size());
		
	//Remove
//	list1.removeAll(list);
//	System.out.println(list1);
//	System.out.println(list1.size());
		
	//Retain all
	list1.retainAll(list);
	System.out.println(list1);
		
	//Clear all
	list1.clear();
	System.out.println(list1);
		
	//Index of 
	int a=list.indexOf(20);
	System.out.println(a);
		
	//Enhanced for loop only for the for generic list 
	for(Object j:list)
	{
		System.out.println(j);
	}
	
		
/--------------------------------------------------------------------------------------------
1) add(Object o)
2) addAll(Collection c)
3) remove(Object o)
4) removeAll(Collection c)
5) retainAll(Collection c)
6) clear()
7) size()
8) isEmpty()
9) contains(object o)
10) containsAll(Collection c)
11) toArrays()
12) iterator()


List interface:
==============================================================================
there are 3 main classes in List interface
	1) ArrayList class
	2) LinkedList Class
	3) Vector class
		there is 1 sub class vector class is stack
 
--------------------------------------------------------------------------------------------------
2) LinkedList Class:
	- The underlaying data structure is singly/double linkedlist 
	- inseration order is maintained
	- duplicate are allowed
	- null insertion is allowed
	- heterogenouse Object are allowed 
	- LinkedList it implements serializable and clonable interface but not a RandomAccess interface
	- it is best choice for inseration and deletion operation and it is worst choice for Retrival operation
	
	
linkedList define the 6 common methods
	1) addFirst(object o)
	2) addLast(Object o)
	3) getFirst()
	4) getLast()
	5) removeFirst()
	6) removeLast()
=================================================================================
diff between arrayList and LinkedList class?
	- underlaying data structure for arraylist is growable or resizable array
	- underlaying data structure for linkedlist is singly/double linked list
	
	- arraylist is best choice for Retrival operation
	- linkedlist is best choice for inseration and deletion operation
	
	- arraylist it implements RandomAccess, serializable and clonable interface.
	- Linked list it implements serializable and clonable interface but not a RandomAccess interface
=====================================================================================


		LinkedList<String> ls=new LinkedList<String>();
		ls.add("java");
		ls.add("SQL");
		ls.add("RSP");
		
		LinkedList<String> ls1=new LinkedList<String>();
		ls1.add("Cucumber");
		ls1.add("Jkins");
		
		for(int i=0; i<ls1.size(); i++)
		{
			System.out.println(ls1.get(i));
		}
		
		for(String j:ls1)
		{
			System.out.println(j);
		}
		
		Iterator<String> it=ls1.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
		
		Object[] ti=ls1.toArray();
		for(Object l:ti)
		{
			System.out.println(l);
		}
		
		
		//add first 
		ls.addFirst("TestNG");
		System.out.println(ls);
		
		ls.add(2,"Python");
		System.out.println(ls);
		
		ls.set(2,"List");
		System.out.println(ls);
		
		//addLast
		ls.addLast("Test");
		System.out.println(ls);
		
		//getLast and First 
		System.out.println(ls.getFirst());
		System.out.println(ls.getLast());
		System.out.println(ls.get(0));
		
		//remove Last/First
		System.out.println(ls.removeFirst());
		System.out.println(ls);
		System.out.println(ls.removeLast());
		System.out.println(ls);
		System.out.println(ls.remove(3));
		System.out.println(ls);
		

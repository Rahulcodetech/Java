//Collection Array 
//Static Array/Fix Size Array 
//Array 

	
	byte[] bt=new byte[5];
	short[] st=new short[5];
	int[] it=new int[5];
	long[] ln=new long[5];
	float[] ft=new float[5];
	double[] db=new double[5];
	boolean[] bl=new boolean[5];
	char[] chr=new char[5];
		
	 	int[] it=new int[5];
		it[0]=10;
		it[1]=20;
		it[3]=30;
		it[4]=40;

		System.out.println(it);
		
		for(int i=0; i<it.length; i++)
		{
			System.out.println(it[i]);
		}
		
		for(Integer e:it)
		{
			System.out.println(e);
		}
		

		System.out.println(it[2]);
		
		Scanner sc =new Scanner(System.in);
		int size=sc.nextInt();
		int num[] =new int[size];
		
		for(int j=0; j<size; j++)
		{
			num[j]=sc.nextInt();
		}
		
		System.out.println(num[0]);
		
		for(int l=0; l<num.length; l++)
		{
			System.out.print(num[l]);
		}
/-----------------------------------------------------------------------

	//Acceding and descending order 
		int[] it=new int[] {10,20,30,55,2,4,3};
		
		int temp;
		for(int i=0; i<it.length; i++)
		{
			for(int j=i; j<it.length; j++)
			{
				if(it[i]>it[j]){
				temp=it[i];
				it[i]=it[j];
				it[j]=temp;}
			}
		}
		
		for(Integer e:it)
		{
			System.out.println(e);
		}
		
/-----------------------------------------------------------------------

	String[] str=new String[2];
	str[0]="Java1";
	str[1]="SQL1";
				
	for(int z=0; z<str.length; z++)
	{
	System.out.println(str[z]);
	}
			
	for(Object n:str)
	{
	System.out.println(n);
	}
			
	for(String pn:str)
	{
	System.out.println(pn);
	}
	System.out.println(digit[1]);
		
/------------------------------------------------------------------------------------------
 	//List
	
	
	Basis				Array								ArrayList
					An array is a dynamically-created object. 			The ArrayList is a class of Java Collections framework.
	Definition			It serves as a container that holds the constant number of	It contains popular classes like Vector, HashTable, and HashMap.
					values of the same type. It has a contiguous memory location.
					
	Static/ Dynamic			Array is static in size.					ArrayList is dynamic in size.
	
	Resizable			An array is a fixed-length data structure.			ArrayList is a variable-length data structure. 
													It can be resized itself when needed.
	Initialization			It is mandatory to provide the size of an array			We can create an instance of ArrayList without specifying its size.
	
	Primitive/ Generic type		An array can store both objects and primitives type.		We cannot store primitive type in ArrayList. It automatically converts 
													primitive type to object.
	Iterating Values		We use for loop or for each loop to iterate over an array.	We use an iterator to iterate over ArrayList.
	
	Length				Array provides a length variable which denotes the 		ArrayList provides the size() method to determine the size of ArrayList.
					length of an array.	
	Single/ Multi-Dimensional	Array can be multi-dimensional.					ArrayList is always single-dimensional.
	
	
	ArrayList ar=new ArrayList();
	ar.add(10);
	ar.add(20);
	ar.add("java");
	ar.add("@#");
	
	System.out.println(ar);
				
	for(int i=0; i<ar.size(); i++)
	{
	System.out.print(ar.get(i));
	}
		
	System.out.println(" ");
		
	for(Object o:ar)
	{
	System.out.print(o);
	}
	System.out.println(" ");
		
	Iterator<Object> it=ar.iterator();
	while(it.hasNext())
	{
	System.out.print(it.next());
	}
	
	//find Maximum number in array 
	
	ArrayList<Integer> it=new ArrayList<Integer>();
	it.add(55);
	it.add(20);
	it.add(30);
	it.add(35);
	it.add(4090);
	it.add(55);
	
	int max=it.get(0);
		
	for(int j=0; j<it.size(); j++){
			
	if(it.get(j)>max)
	{
		max=it.get(j);
	}
	   System.out.println(max);
	}
		
	//find Minimum number is 
	int min=num.get(0);
	
	for(int j=0; j<num.size(); j++)
	{
		if(num.get(j)<min)
		min=num.get(j);
	}
	System.out.println("Minimum number is "+ min);
	}
/------------------------------------------------------------------------------------------------------
		
		
    	ArrayList arr=new ArrayList();  //Dynamic Object Array Array 
	arr.add(0);
	arr.add(1);
	arr.add("java");
	arr.add("SQL");
	System.out.println(arr.get(2));
		
	ArrayList<String> ar1=new ArrayList<String>();  //
	ar1.add("Java");
	ar1.add("SQL");
	System.out.println(ar1.get(1)+" String Array");
		
		
	ArrayList mylist=new ArrayList();
	mylist.add(10);
	mylist.add("java");	
	mylist.add("SQL");
		
	for(int u=0; u<mylist.size(); u++)
	{
	System.out.println(mylist.get(u));
	}
    
   	ArrayList list=new ArrayList();
	list.add(10);
	list.add(23);
	list.add(35);	
	list.add("java");
	list.add("API");

	System.out.print(list);
		
	ArrayList list1=new ArrayList();
	list1.add(20);
	list1.add(10);
	
		
	//Add 
//	list.addAll(list1);
//		
//	System.out.println(list);
//	System.out.println(list.size());
		
	//Remove
//	list1.removeAll(list);
//	System.out.println(list1);
//	System.out.println(list1.size());
		
	//Retain all
	list1.retainAll(list);
	System.out.println(list1);
		
	//Clear all
	list1.clear();
	System.out.println(list1);
		
	//Index of 
	int a=list.indexOf(20);
	System.out.println(a);
		
	//Enhanced for loop only for the for generic list 
	for(Object j:list)
	{
		System.out.println(j);
	}
	
		
/--------------------------------------------------------------------------------------------
1) add(Object o)
2) addAll(Collection c)
3) remove(Object o)
4) removeAll(Collection c)
5) retainAll(Collection c)
6) clear()
7) size()
8) isEmpty()
9) contains(object o)
10) containsAll(Collection c)
11) toArrays()
12) iterator()


List interface:
==============================================================================
there are 3 main classes in List interface
	1) ArrayList class
	2) LinkedList Class
	3) Vector class
		there is 1 sub class vector class is stack
 
--------------------------------------------------------------------------------------------------
2) LinkedList Class:
	- The underlaying data structure is singly/double linkedlist 
	- inseration order is maintained
	- duplicate are allowed
	- null insertion is allowed
	- heterogenouse Object are allowed 
	- LinkedList it implements serializable and clonable interface but not a RandomAccess interface
	- it is best choice for inseration and deletion operation and it is worst choice for Retrival operation
	
	
linkedList define the 6 common methods
	1) addFirst(object o)
	2) addLast(Object o)
	3) getFirst()
	4) getLast()
	5) removeFirst()
	6) removeLast()
=================================================================================
diff between arrayList and LinkedList class?
	- underlaying data structure for arraylist is growable or resizable array
	- underlaying data structure for linkedlist is singly/double linked list
	
	-Continues memory location	
	-Linked List stored in node or non continues
	
	- arraylist is best choice for Retrival operation
	- linkedlist is best choice for inseration and deletion operation
	
	- arraylist it implements RandomAccess, serializable and clonable interface.
	- Linked list it implements serializable and clonable interface but not a RandomAccess interface
	
	-ArrayList is initialized, with default capacity of 10 is assigned to the ArrayList.	
	-In LinkedList, an empty list is created when a LinkedList is initialized.
=====================================================================================


		LinkedList<String> ls=new LinkedList<String>();
		ls.add("java");
		ls.add("SQL");
		ls.add("RSP");
		
		LinkedList<String> ls1=new LinkedList<String>();
		ls1.add("Cucumber");
		ls1.add("Jkins");
		
		for(int i=0; i<ls1.size(); i++)
		{
			System.out.println(ls1.get(i));
		}
		
		for(String j:ls1)
		{
			System.out.println(j);
		}
		
		Iterator<String> it=ls1.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
		
		Object[] ti=ls1.toArray();
		for(Object l:ti)
		{
			System.out.println(l);
		}
		
		
		//add first 
		ls.addFirst("TestNG");
		System.out.println(ls);
		
		ls.add(2,"Python");
		System.out.println(ls);
		
		ls.set(2,"List");
		System.out.println(ls);
		
		//addLast
		ls.addLast("Test");
		System.out.println(ls);
		
		//getLast and First 
		System.out.println(ls.getFirst());
		System.out.println(ls.getLast());
		System.out.println(ls.get(0));
		
		//remove Last/First
		System.out.println(ls.removeFirst());
		System.out.println(ls);
		System.out.println(ls.removeLast());
		System.out.println(ls);
		System.out.println(ls.remove(3));
		System.out.println(ls);
		
Collection Interface

Set interface
----------------------------------------------------------------------------------------------------------------------------
SortedSet interface:
=============================================================================
It is a child interface of set.

If we want to represent a group of individual objects according to some sorting order and duplicates 
are not allowed then we should go for SortedSet. 

- {1,2,3}   {3,2,1}   {3,1,2} => Yes  
- {1,2,3,4,5,6,7,8} => Some sorting is provided is here

	- SortedSet is child interface of Set interface.
	SortedSet interface have 6 methods
	1) first()				it return the first element from the set
	2) last() 				it return the last element from the set
	3) headSet(element) 			return all the elements from the set before the specified element
	4) tailSet(element)			return all the elements from the set after specified element and also that specified element
	5) subSet(element1,element2)		return the all the elements between element1 and element2. and also return element 1
	6) comparator()				return comparator that can be used to order element in set.
----------------------------------
        S1={100,101,103,104,107,110,115}

	-first() - 100
	-last()  - 115
	-headSet(104) - [100,101,103]
	-tailSet(104) - [104,104,110,115]
	-subSet(103,110) -[103,104,107]
	-comparator - default natural sorting order => null
Note: 
	-default natural sorting order for number -Ascending
	-default natural sorting order for String -Alphabetical order
------------

package treeSetConcept;

import java.util.TreeSet;

public class Demo1 {

	public static void main(String[] args) {
		TreeSet t = new TreeSet();
		t.add(10);
		t.add(5);
		t.add(97);
		t.add(66);
		t.add(99);
		System.out.println(t);
		System.out.println("************");
		
		TreeSet r = new TreeSet();
		r.add("API");
		r.add("JAVA");
		r.add("HAVA");
		r.add("IAVA");
		r.add("KAVA");
		System.out.println(r);

	}

}

==============================================================================
NavigableSet interface
	- it child interface of SortedSet interface.
	- we can access all the methods from the SortedSet interface.
	- NavigableSet interface define some more methods

	1) pollFirst()		return and remove first element from set
	2) pollLast()		return and remove the last element from the set
	3) higher()		return the lowest element among the those element that are greater than specified element
	4) lower()		return and greatest elements among those element that are less than specified element
	5) descendingSet()	reverse the order element is set.
	6) ceiling()		
	7) floor()			
	
=================================================================================
TreeSet class:
	- it is child class of NavigableSet interface
			or
	- it implements class of NavigableSet interface.
	- it is grandchild class of SortedSet interface.
	- underlaying datastructure is balanced tree
	- duplicate are not allowed
	- inseration order is not maintained(But some sorting order is maintained)
	- Hetrogenouse object are not allowed.(VIMP)
	- null insertion is not allowed.	

syntax:
	TreeSet t =new TreeSet();
	

----------------------
package treeSetConcept;

import java.util.TreeSet;

public class Basics {

	public static void main(String[] args) {

		TreeSet t1 = new TreeSet();
		t1.add("A");
		t1.add("a");
		t1.add("B");
		t1.add("Z");
		t1.add("L");
//		t1.add(10); // ClassCastException => Heterogeneous objects are not allowed
		t1.add(null); // NullPointerException 
		
		System.out.println(t1); //

	}

}
----------------------------------
package Tutorial6;

import java.util.TreeSet;

public class Demo1 {

	public static void main(String[] args) {
		TreeSet t1 = new TreeSet();
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		
		TreeSet t2 = new TreeSet();
		t2.add("P");
		t2.add("Q");
		t2.add("R");
		t2.add("S");
		
		System.out.println(t2);
		
		t2.addAll(t1);
		
		System.out.println(t2);
		//t2.removeAll(t1);
		//t2.retainAll(t1);
		System.out.println(t2.containsAll(t1));
		
			
	}

}
---------------------------------
package Tutorial6;

import java.util.TreeSet;

public class Demo1 {

	public static void main(String[] args) {
		TreeSet t1 = new TreeSet();
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		
		TreeSet t2 = new TreeSet();
		t2.add("P");
		t2.add("Q");
		t2.add("R");
		t2.add("S");
		
		System.out.println(t2);
		
		t2.addAll(t1);
		t2.remove("C");
		System.out.println(t2);
		System.out.println(t2.size());
		System.out.println(t2.isEmpty());
		t2.clear();
		
		System.out.println(t2);
			
	}
}
===========================================================

package UtilsLayer;

import java.time.Duration;
import java.util.List;
import java.util.TreeSet;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Demo1 {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.manage().deleteAllCookies();
		driver.manage().window().maximize();
		driver.get("https://www.facebook.com/reg");

		WebElement wb = driver.findElement(By.name("birthday_month"));

		Select sel = new Select(wb);

		List<WebElement> ls = sel.getOptions();

		TreeSet t = new TreeSet();

		for (WebElement abc : ls) 
		{
			String a = abc.getText();
			t.add(a);
		}

		System.out.println(t);

	}

}

================================================
package treeSetConcept;

import java.util.SortedSet;
import java.util.TreeSet;

public class Demo3 {

	public static void main(String[] args) {
		
		SortedSet<String> t1 = new TreeSet<String>();
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		t1.add("E");
		t1.add("F");
		t1.add("G");
		t1.add("Y");
		t1.add("H");
		
		System.out.println(t1.first());
		System.out.println(t1.last());
		System.out.println(t1.headSet("D"));
//		
		System.out.println(t1.tailSet("D"));
//		
		System.out.println(t1.subSet("A", "E"));
		
	}

}
------------------------------
package Tutorial6;

import java.util.Comparator;
import java.util.SortedSet;
import java.util.TreeSet;

public class Demo2 {

	public static void main(String[] args) {
		SortedSet<String> t1 = new TreeSet<String>();
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		t1.add("E");
		t1.add("F");
		t1.add("G");
		t1.add("Y");
		t1.add("H");
		
		System.out.println(t1.first()); // A
		System.out.println(t1.last()); // Y
		System.out.println(t1.headSet("D"));
		
		System.out.println(t1.tailSet("B"));
		
		System.out.println(t1.subSet("A", "E"));
		
	}

}

===================================================================================
package Tutorial6;

import java.util.Comparator;
import java.util.NavigableSet;
import java.util.SortedSet;
import java.util.TreeSet;

public class Demo2 {

		//SortedSet interface it implement the Comparator interface
		//NavigableSet interface it implement the Comparable interface
	
	public static void main(String[] args) {
		NavigableSet<String> t1 = new TreeSet<String>();
		
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		t1.add("E");
		t1.add("F");
		t1.add("G");
		t1.add("H");
		
		System.out.println(t1);
		
//		System.out.println(t1.pollFirst());
//		System.out.println(t1.pollLast());
		
		System.out.println(t1.higher("D"));
		System.out.println(t1.lower("C"));
		System.out.println(t1);
		System.out.println(t1.descendingSet());
	
		
	}

}
-----------------
package treeSetConcept;

import java.util.NavigableSet;
import java.util.TreeSet;

public class Demo4 {

	public static void main(String[] args) {
		
		NavigableSet<String> t1 = new TreeSet<String>();
		
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		t1.add("E");
		t1.add("F");
		t1.add("G");
		t1.add("H");
		t1.add("H");
		System.out.println(t1.size());
		
		System.out.println(t1);
		
		System.out.println(t1.pollFirst());
		System.out.println(t1.pollLast());
		
		System.out.println(t1.higher("D")); //E
		System.out.println(t1.lower("C")); // 
//		System.out.println(t1);
		System.out.println(t1.descendingSet()); // [G, F, E, D, C, B]

	}

}

=====================================================================================
Cursors in Collection:
	if u want to get object one by one in Collection then we can go for Cursors 
	
there are 3 types of Cursors in Collection
	1) Enumeration interface
	2) Iterator interface
	3) ListIterator  interface
-------------------------------------------------------------------------------------------
1) Enumeration interface:		version 1.0
	it is an cursor to retrive the object from the Vector class
	- it define the 2 methods
	1) hasMoreElements()			boolean
	2) nextElement()			Object
	
package Tutorial6;

import java.util.Enumeration;
import java.util.Vector;

public class Demo3 {

	public static void main(String[] args) {
		
		Vector v =new Vector();
		v.add("A");
		v.add(null);
		v.add(100);
		v.add("A");
		
		
		Enumeration  a =v.elements();
		
		while(a.hasMoreElements())
		{
			Object c =a.nextElement();
			System.out.println(c);
		}
		
		

	}

}

============================================================
2) Iterator interface:			java 1.2 v
	if u want to get object one by one in Collection then we can go for Cursors 
	- Iterator interface it define the 3 methods
	1) hasNext()		boolean
	2) next()		Object
	3) remove()		void


package Tutorial6;

import java.util.HashSet;
import java.util.Iterator;

public class Demo3 {

	public static void main(String[] args) {
		
		HashSet v =new HashSet();
		v.add("A");
		v.add(null);
		v.add(100);
		v.add("A");
		
		Iterator it =v.iterator();
	
		while(it.hasNext())
		{
		
			System.out.println(it.next());
			it.remove();
		}
		
	}

}

=================================================================
3) ListIterator  interface:			1.4 version
	it child interface of Iterator interface
	it is appliable for only List interface classes.

	
	it define the 9 methods
	1) hasNext()
	2) next()
	3) nextIndex()
	4) hasPrevious()
	5) previous()
	6) previousIndex()
	7) remove()
	8) set(Object o)
	9) add(Object o)


package Tutorial6;

import java.util.LinkedList;
import java.util.ListIterator;

public class Demo3 {

	public static void main(String[] args) {
		
		LinkedList<String> t1 = new LinkedList<String>();
		t1.add("A");
		t1.add("B");
		t1.add("C");
		t1.add("D");
		
		ListIterator<String> it =t1.listIterator();
		
		it.add("E");
		
		while(it.hasNext())
		{
			String a =it.next();
			
			
//			if(a.equals("C"))
//			{
//				it.set("E");
//			}
		}
		
		System.out.println(t1);

	}

}
----------------------------------------------------



//Constructor, excute automatically and do not occupy space, no return value, initilization of object , only defalut , public, private , protected.
	super() and this() must be first line and both not be simultaneously. 
	super() & this() can be used only in the constructor.
	super() call constructor from another constructor
	this() & super() are constructor call
	this and super are the
	constructor overloading is applicable
	Overriding not applicable to constructor
	in interface the constructor is not applicable as interface are final and constructor is not applicable
	abstract class constrctor is applicable
	
	//Constructor
	class test()
	{
	System.out.println();
	}
	
	class test(double d)
	{
	this.d
	System.out.println();
	}
	
	class test(int a)
	{
	this.d
	System.out.println()
	}

	class
        Object oriented programing structure or System --> Real world methodology or paradigm
        1. Object oriented paradim
        2. Procedural oriented paradim
        3. Subject oriented paradim
        4. logical oriented paradim

        Class
        Method
        Constructor
        Object
        Inheritance
        Abstraction
        Polymorphism
        Encapsulation

        class is collection of object
        class is not real world entity (it is just template or blue print)
        class does not occupy memory
        class contains --> method , constructor fields objects nested class
	
	Constructor
	class name is constructor name 
        constructor does not occupy memory
        constructor initialize the object
        constructor use only public,private, protected, and default class
        constructor use sure() and this() in first line only
        constructor use sure() to call the another constructor
        constructor can not use sure() and this() at same time
        Constructor overriding is not allowed
        constructor overloading is possible
        Type of constructor
                Deafult constructor
                Parameterized constructor
                No argument constructor /Copy constructor
		
		
		
public class employee {

	 String name;
	 int id;
	public employee (String name, int id) {
		this.name=name;
		this.id=id;
	}
	
	public static void main(String[] args) {
		
		employee emp1=new employee ("Rahul", 101);
		employee emp2=new employee ("Pawar", 102);
		
		System.out.println(emp1.name +" "+ emp1.id);
		System.out.println(emp2.name +" "+ emp2.id);
	}

}
		
		
		
